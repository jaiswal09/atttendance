# RSAMS - Role-Based Student Attendance Management System
# Complete Setup Guide for VS Code

=================================================================
WHAT IS RSAMS?
=================================================================

RSAMS is a comprehensive web application for managing student attendance with role-based access:
- Students: Mark attendance, submit leave requests, view personal analytics
- Teachers: Manage class attendance, approve leave requests, view course analytics  
- Administrators: Full system management, user management, course management

=================================================================
SYSTEM REQUIREMENTS
=================================================================

Before starting, ensure you have:
- Windows 10/11, macOS 10.14+, or Linux Ubuntu 18.04+
- At least 4GB RAM
- 2GB free disk space
- Stable internet connection

=================================================================
STEP 1: INSTALL REQUIRED SOFTWARE
=================================================================

1. Install Node.js (Required):
   - Visit: https://nodejs.org/
   - Download LTS version (recommended)
   - Run installer with default settings
   - Restart computer after installation

2. Install PostgreSQL Database:
   - Visit: https://www.postgresql.org/download/
   - Download for your operating system
   - During installation:
     * Set password for 'postgres' user (REMEMBER THIS!)
     * Use default port 5432
     * Accept default locale
   - Complete installation

3. Install Visual Studio Code:
   - Visit: https://code.visualstudio.com/
   - Download and install with default settings

4. Install Git (if not already installed):
   - Visit: https://git-scm.com/
   - Download and install with default settings

=================================================================
STEP 2: VERIFY INSTALLATIONS
=================================================================

Open Command Prompt (Windows) or Terminal (Mac/Linux) and verify:

1. Check Node.js:
   node --version
   npm --version
   (Both should show version numbers)

2. Check PostgreSQL:
   psql --version
   (Should show PostgreSQL version)

3. Check Git:
   git --version
   (Should show Git version)

If any command fails, reinstall that software.

=================================================================
STEP 3: SET UP THE PROJECT IN VS CODE
=================================================================

1. Open VS Code

2. Open Terminal in VS Code:
   - Go to Terminal â†’ New Terminal
   - Or press Ctrl+` (Windows/Linux) or Cmd+` (Mac)

3. Navigate to your desired project location:
   cd Desktop
   (or wherever you want the project)

4. If you have the project files:
   - Extract/copy the project folder to Desktop
   - In VS Code: File â†’ Open Folder â†’ Select the project folder

5. If downloading from repository:
   git clone [REPOSITORY_URL]
   cd rsams-attendance-system

6. Open the project in VS Code:
   code .
   (This opens current directory in VS Code)

=================================================================
STEP 4: INSTALL PROJECT DEPENDENCIES
=================================================================

In VS Code Terminal, run:

1. Install all dependencies:
   npm install

   This will take 2-5 minutes and install all required packages.

2. If you see any warnings, they're usually safe to ignore.

=================================================================
STEP 5: SET UP THE DATABASE
=================================================================

1. Create the database:
   - In VS Code Terminal, run:
     psql -U postgres
   - Enter your PostgreSQL password
   - Create database:
     CREATE DATABASE rsams_db;
   - Exit PostgreSQL:
     \q

2. Configure environment variables:
   - In VS Code, copy .env.example to .env:
     cp .env.example .env
   
   - Open .env file in VS Code
   - Update the DATABASE_URL line:
     DATABASE_URL="postgresql://postgres:YOUR_PASSWORD@localhost:5432/rsams_db?schema=public"
   - Replace YOUR_PASSWORD with your PostgreSQL password
   - Save the file (Ctrl+S or Cmd+S)

3. Set up database schema:
   npm run db:generate
   npm run db:migrate

4. Add sample data:
   npm run db:seed

=================================================================
STEP 6: START THE APPLICATION
=================================================================

In VS Code Terminal, run:

npm run dev

You should see output like:
- "ðŸš€ RSAMS Server running on port 3001"
- "Local: http://localhost:5173"

The application will automatically open in your browser at:
http://localhost:5173

=================================================================
STEP 7: TEST LOGIN WITH DEMO ACCOUNTS
=================================================================

Use these pre-created accounts to test the system:

ADMINISTRATOR ACCOUNT:
- Email: admin@rsams.edu
- Password: admin123
- Access: Full system management

TEACHER ACCOUNT:
- Email: sarah.johnson@rsams.edu
- Password: teacher123
- Access: Course and attendance management

STUDENT ACCOUNT:
- Email: john.smith@student.rsams.edu
- Password: student123
- Access: Personal attendance and leave requests

=================================================================
STEP 8: HOW TO REGISTER NEW USERS
=================================================================

METHOD 1 - Through Admin Dashboard (Recommended):

1. Login as Administrator (admin@rsams.edu / admin123)
2. Go to "User Management" tab
3. Click "Add New User" button
4. Fill in the form:
   - Email: user@example.com
   - Password: (minimum 8 characters)
   - Role: STUDENT, TEACHER, or ADMIN
   - Name: Full name
   - Student ID: (for students only)
   - Phone: (optional)
   - Address: (optional)
5. Click "Create User"

METHOD 2 - Direct Database Registration:

1. In VS Code Terminal, connect to database:
   psql -U postgres -d rsams_db

2. Insert new user (example for student):
   INSERT INTO users (id, email, "passwordHash", role) 
   VALUES ('new_user_id', 'newstudent@example.com', '$2a$12$hashedpassword', 'STUDENT');

3. Insert student profile:
   INSERT INTO student_profiles (id, "userId", name, "studentId") 
   VALUES ('profile_id', 'new_user_id', 'Student Name', 'ST2024005');

Note: For production, always use the Admin Dashboard method.

=================================================================
STEP 9: VIEW DATABASE IN VS CODE
=================================================================

OPTION 1 - Using Prisma Studio (Recommended):

1. In VS Code Terminal, run:
   npm run db:studio

2. This opens a web interface at http://localhost:5555
3. You can view and edit all database tables
4. Changes are saved automatically

OPTION 2 - Using VS Code Extensions:

1. Install PostgreSQL extension:
   - Go to Extensions (Ctrl+Shift+X)
   - Search "PostgreSQL"
   - Install "PostgreSQL" by Chris Kolkman

2. Connect to database:
   - Open Command Palette (Ctrl+Shift+P)
   - Type "PostgreSQL: New Connection"
   - Enter connection details:
     * Host: localhost
     * Port: 5432
     * Database: rsams_db
     * Username: postgres
     * Password: [your password]

3. View tables in Explorer panel

OPTION 3 - Using Terminal Commands:

1. Connect to database:
   psql -U postgres -d rsams_db

2. List all tables:
   \dt

3. View table data:
   SELECT * FROM users;
   SELECT * FROM student_profiles;
   SELECT * FROM courses;

4. Exit:
   \q

=================================================================
STEP 10: UNDERSTANDING THE PROJECT STRUCTURE
=================================================================

Key folders and files:

Frontend (React):
- src/components/ - UI components
- src/hooks/ - Custom React hooks
- src/types/ - TypeScript type definitions

Backend (Node.js/Express):
- server/ - Backend API code
- server/routes/ - API endpoints
- server/middleware/ - Authentication & validation

Database:
- prisma/schema.prisma - Database schema
- prisma/migrations/ - Database migrations
- server/seed.js - Sample data

Configuration:
- .env - Environment variables
- package.json - Dependencies and scripts

=================================================================
STEP 11: COMMON DEVELOPMENT COMMANDS
=================================================================

Start development server:
npm run dev

Start only frontend:
npm run dev:client

Start only backend:
npm run dev:server

View database:
npm run db:studio

Reset database (WARNING: Deletes all data):
npx prisma migrate reset
npm run db:seed

Generate new migration:
npx prisma migrate dev --name migration_name

Build for production:
npm run build

=================================================================
STEP 12: TESTING THE FEATURES
=================================================================

STUDENT FEATURES:
1. Login as student
2. Mark attendance for enrolled courses
3. Submit leave requests
4. View attendance statistics
5. Check leave request status

TEACHER FEATURES:
1. Login as teacher
2. View assigned courses and students
3. Mark/update student attendance
4. Approve/reject leave requests
5. View course analytics

ADMIN FEATURES:
1. Login as admin
2. Manage users (create/edit/delete)
3. Manage courses
4. View system-wide reports
5. Monitor all activities

=================================================================
TROUBLESHOOTING COMMON ISSUES
=================================================================

Issue: "npm: command not found"
Solution: Reinstall Node.js and restart VS Code

Issue: "psql: command not found"
Solution: Reinstall PostgreSQL and add to system PATH

Issue: "Port 3001 already in use"
Solution: 
- Kill existing process: npx kill-port 3001
- Or change PORT in .env file

Issue: "Database connection failed"
Solution:
1. Check if PostgreSQL is running
2. Verify DATABASE_URL in .env file
3. Ensure database 'rsams_db' exists

Issue: "Migration failed"
Solution:
1. Reset database: npx prisma migrate reset
2. Run migrations: npm run db:migrate
3. Seed data: npm run db:seed

Issue: Login not working
Solution: Use exact demo credentials from Step 7

Issue: "Module not found" errors
Solution:
1. Delete node_modules folder
2. Delete package-lock.json
3. Run: npm install

Issue: Frontend not loading
Solution:
1. Check if both servers are running (ports 3001 and 5173)
2. Clear browser cache
3. Try different browser

=================================================================
STEP 13: DEVELOPMENT WORKFLOW
=================================================================

Daily Development:
1. Open VS Code
2. Open Terminal (Ctrl+`)
3. Run: npm run dev
4. Open http://localhost:5173
5. Make changes to code
6. Changes auto-reload in browser

Adding New Features:
1. Create new components in src/components/
2. Add new API routes in server/routes/
3. Update database schema in prisma/schema.prisma
4. Run migrations: npm run db:migrate

Database Changes:
1. Modify prisma/schema.prisma
2. Generate migration: npx prisma migrate dev --name feature_name
3. Update seed data if needed

=================================================================
STEP 14: PRODUCTION DEPLOYMENT NOTES
=================================================================

For production deployment:
1. Set NODE_ENV=production in .env
2. Use production PostgreSQL database
3. Generate strong JWT_SECRET
4. Configure proper CORS origins
5. Set up SSL/TLS encryption
6. Use process manager like PM2

Security Checklist:
- Change all default passwords
- Use environment variables for secrets
- Enable HTTPS
- Configure firewall
- Set up regular backups
- Monitor logs

=================================================================
SUPPORT AND RESOURCES
=================================================================

Technology Documentation:
- React: https://react.dev/
- Node.js: https://nodejs.org/docs/
- PostgreSQL: https://www.postgresql.org/docs/
- Prisma: https://www.prisma.io/docs/
- Express: https://expressjs.com/

VS Code Extensions (Recommended):
- ES7+ React/Redux/React-Native snippets
- Prettier - Code formatter
- Auto Rename Tag
- Bracket Pair Colorizer
- GitLens

Getting Help:
1. Check browser console for errors (F12)
2. Check VS Code Terminal for server errors
3. Review this setup guide
4. Check individual technology documentation

=================================================================

This completes the setup guide for RSAMS. The application should now be running locally and ready for development or testing.

For any issues not covered in this guide, please check the troubleshooting section or refer to the individual technology documentation.